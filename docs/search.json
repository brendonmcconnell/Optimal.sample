[{"path":"/articles/Optimal.sample.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Optimal.sample","text":"maxpower.opt() mincost.opt() 16 arguments, however, one important .optimal.s. argument provides optimal number clusters units within clusters three different cases: optimal number clusters units allowed different treatment control arms (optimal.s = \"CLUST-IND\"). number clusters allowed different treatment control arms, number units constrained arms (optimal.s = \"CONST-IND\"). number units within cluster allowed different treatment control arms, number clusters constrained arms (optimal.s = \"CONST-CLUST\"). examples maxpower.opt() mincost.opt() multiple scenarios combination different options argument .optimal.s: example, fixed costs per cluster variable cost per unit within cluster different treatment control. three different scenarios, different total costs. syntax (optimal.s = “CLUST-IND”) allows optimal number clusters units per cluster different treatment control arms. two ways report results: first directly matrix following section; second .xlsx file using argument .output name file (output = \"name_of_the_file\") example, fixed costs per cluster variable cost per unit within cluster different treatment control. three different scenarios, different value fixed cost per cluster control group (f0). syntax (optimal.s = \"CLUST-IND\") allows optimal number clusters units per cluster different treatment control arms. initial conditions specified optimization algorithm: m0=20, m1=18, k0=15 k1=18. example three scenarios, different value fixed cost per cluster treatment group (f1). syntax (optimal.s = \"CONST-IND\") requests number units per cluster constrained treatment control. example four scenarios, different value variable cost per unit treatment group (v1). syntax (optimal.s = \"CONST-CLUST\") requests number clusters constrained treatment control.","code":"maxpower.opt(delta = 0.25,               sigma = 1,               rho = 0.05,               alpha = 0.05,               C = c(815052.294, 974856.169, 1095876.675),               v0 = 150,               v1 = 2200,               f0 = 500,               f1 = 18000,               optimal.s = \"CLUST-IND\") scenario      1.0000000      2.0000000       3.000000   delta         0.2500000      0.2500000       0.250000   sigma         1.0000000      1.0000000       1.000000   rho           0.0500000      0.0500000       0.050000   C        815052.2940000 974856.1690000 1095876.675000   v0          150.0000000    150.0000000     150.000000   v1         2200.0000000   2200.0000000    2200.000000   f0          500.0000000    500.0000000     500.000000   f1        18000.0000000  18000.0000000   18000.000000   k0           87.9674349    105.2148436     118.276433   k1           14.6612409     17.5358068      19.712737   m0            7.9582249      7.9582260       7.958223   m1           12.4681418     12.4681435      12.468142   power         0.6740177      0.7524999       0.800811 mincost.opt(delta = 0.25,                sigma = 1,                rho = 0.05,                alpha = 0.05,                beta = 0.80,                v0 = 150,                v1 = 2200,                f0 = c(500, 1500, 5000),                f1 = 18000,                optimal.s = \"CLUST-IND\",                initial.cond = c(20, 18, 15, 18)) maxpower.opt(delta = 0.25,                 sigma = 1,                 rho = 0.27,                 alpha = 0.05,                 C = c(75862.836, 145230.184, 204196.756),                 v0 = 25,                 v1 = 100,                 f0 = 381,                 f1 = c(500, 1981, 3500),                 optimal.s = \"CONST-IND\") mincost.opt(delta = 0.25,                sigma = 1,                rho = 0.05,                alpha = 0.05,                beta = 0.80,                v0 = 150,                v1 = c(250, 750, 1500, 2000),                f0 = 500,                f1 = 18000,                optimal.s = \"CONST-CLUST\")"},{"path":"/articles/Optimal.sample.html","id":"dual-problem","dir":"Articles","previous_headings":"","what":"Dual problem","title":"Optimal.sample","text":"section provide examples show dual problem mincost.opt() provides optimal sample design primal problem maxpower.opt(). start maximizing statistical power cluster RCT given cost constrain using maxpower.opt() function. , solve dual problem, minimizing costs subject achieving given level power, using mincost.opt() function. example, fixed costs per cluster variable cost per unit within cluster different treatment control. syntax (optimal.s = \"CLUST-IND\") allows optimal number clusters units per cluster different treatment control arms. Primal problem: results report primal problem: Dual problem: results report dual problem:","code":"maxpower.opt(delta = 0.25,                sigma = 1,                rho = 0.05,                alpha = 0.05,                C = 1177102.663661,                q = 1,                v0 = 100,                v1 = 2150,                f0 = 500,                f1 = 18000,                optimal.s = \"CLUST-IND\") scenario       1   delta          0.250000   sigma          1.000000   rho            0.050000   C        1177102.663661   v0           100.000000   v1          2150.000000   f0           500.000000   f1         18000.000000   k0           130.875225   k1            21.812541   m0             9.746796   m1            12.612286   power          0.850000 mincost.opt(delta = 0.25,              sigma = 1,              rho = 0.05,              alpha = 0.05,              beta = 0.85,              q = 1,              v0 = 100,              v1 = 2150,              f0 = 500,              f1 = 18000,              optimal.s = \"CLUST-IND\") scenario       1   delta          0.250000   sigma          1.000000   rho            0.050000   v0           100.000000   v1          2150.000000   f0           500.000000   f1         18000.000000   k0           130.875241   k1            21.812541   m0             9.746794   m1            12.612286   cost     1177102.663661 library(Optimal.sample)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nancy . Daza-Báez. Author, maintainer. Brendon McConnell. Author. Marcos Vera-Hernández. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Daza-Báez N, McConnell B, Vera-Hernández M (2022). Optimal.sample: Optimal Sample Design Cluster Randomized Trial Different Costs Treatment Control.. R package version 0.0.0.9000, https://brendonmcconnell.github.io/Optimal.sample/.","code":"@Manual{,   title = {Optimal.sample: Optimal Sample Design for Cluster Randomized Trial with Different Costs in Treatment that in Control.},   author = {Nancy A. Daza-Báez and Brendon McConnell and Marcos Vera-Hernández},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://brendonmcconnell.github.io/Optimal.sample/}, }"},{"path":"/index.html","id":"optimalsample-optimal-sample-design-for-cluster-randomized-trials-with-different-costs-in-treatment-and-control","dir":"","previous_headings":"","what":"Optimal Sample Design for Cluster Randomized Trial with Different Costs in Treatment that in Control.","title":"Optimal Sample Design for Cluster Randomized Trial with Different Costs in Treatment that in Control.","text":"Authors: Nancy . Daza-Báez (n.baez@ucl.ac.uk), Brendon McConnell (brendon.mcconnell@gmail.com) Marcos Vera-Hernández (m.vera@ucl.ac.uk) package provides optimal sample design (number treatment control clusters number units sampled within treatment control clusters) Cluster Randomized Control Trial either maximize power subject cost constraint minimize costs subject given level power. outcome variable assumed continuous, available endline (post treatment). package provided free charge without guarantee. use package, please, cite package well McConnell Vera-Hernandez (2022) “powerful Cluster Randomized Control Trials”. software assumes cost function isC = k0*(f0 + (v0*m0)) + k1*(f1 + (v1*m1)) k1 number treatment clusters, k0 number control clusters, m1 number units sampled within treatment clusters, m0 number units sampled within control clusters, f1 fixed cost sampling treatment cluster, f0 fixed cost sampling control cluster, v1 marginal cost treatment unit, v0 marginal cost control unit. package contains two functions: MinCosts.opt.R minimizes costs subject given level power, MaxPower.opt.R maximizes power subject given level cost. online vignettes contains gallery examples.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Optimal Sample Design for Cluster Randomized Trial with Different Costs in Treatment that in Control.","text":"can install development version Optimal.sample GitHub :","code":"install.packages(\"devtools\") devtools::install_github(\"brendonmcconnell/Optimal.sample\", build_vignettes = TRUE)"},{"path":"/reference/maxpower.opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Power maximizing sample design for cluster Randomized Control Trials with only an endline measurement subject to a costs constraint. — maxpower.opt","title":"Power maximizing sample design for cluster Randomized Control Trials with only an endline measurement subject to a costs constraint. — maxpower.opt","text":"function delivers number clusters number units (individuals, firms, etc) within cluster maximizes power subject cost constraint cluster Randomized Control Trial (RCT). function assumes outcome variable continuous measured endline. function assumes cost function includes fixed costs per cluster (can different treatment control clusters) well cost per unit within cluster (can different treatment control clusters): \\(Costs = k0*(f0 + (v0*m0)) + k1*(f1 + (v1*m1))\\). function provides optimal number clusters units within clusters three different cases: (1) optimal number clusters units allowed different treatment control arms, (2) number clusters allowed different treatment control arms, number units constrained arms, (3) number units within cluster allowed different treatment control arms, number clusters constrained arms.","code":""},{"path":"/reference/maxpower.opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power maximizing sample design for cluster Randomized Control Trials with only an endline measurement subject to a costs constraint. — maxpower.opt","text":"","code":"maxpower.opt(   delta,   sigma,   rho,   alpha,   C,   q = 1,   v0,   v1,   f0,   f1,   optimal.s = c(\"CLUST-IND\", \"CONST-IND\", \"CONST-CLUST\"),   initial.cond = NULL,   seed = 210613,   lb = NULL,   ub = NULL,   temp = NULL,   output = NULL )"},{"path":"/reference/maxpower.opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power maximizing sample design for cluster Randomized Control Trials with only an endline measurement subject to a costs constraint. — maxpower.opt","text":"delta Vector. Size effect outcome variable (effect size measured units outcome variable). sigma Vector. Standard deviation outcome variable. rho Vector. Intra-cluster correlation. alpha Vector. Significance level null hypothesis effect. C Vector. Maximum level costs implementing RCT. includes data collection costs (baseline endline) costs implementing intervention study. q (K - q) degrees freedom test null hypothesis null effect. Default 1. v0 Vector. Variable costs per unit control clusters. includes cost data collection (baseline endline) cost implementing intervention study. v1 Vector. Variable costs per unit treatment clusters. includes cost data collection (baseline endline) cost implementing intervention study. f0 Vector. Fixed costs per control cluster. includes total fixed cost: baseline endline. f1 Vector. Fixed costs per treatment cluster. includes total fixed cost: baseline endline. optimal.s Indicates whether sample design constrain number units per treatment control clusters (\"CONST-IND\") whether sample design constrain treatment control clusters \"CONST-CLUST\" whether solution fully unconstrained (\"CLUST-IND\"). initial.cond Vector. Initial values number sample units per cluster (m0, m1) number clusters (k0, k1) - keep order- optimization routine use. Default NULL, case, function compute initial conditions. seed Integer. Seed random number generator optimization routine GenSA use. Default 210613. lb Vector. Minimum possible value optimal number clusters optimal number units. Default 1 parameter. ub Vector. Maximum possible value optimal number clusters optimal number units. Default 1000 parameter. temp Numeric. Temperature parameter GenSA optimization function. Default NULL, case, default value GenSA function used. output Indicates name xlsx file want save results. Default NULL, case, results presented matrix.","code":""},{"path":"/reference/maxpower.opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power maximizing sample design for cluster Randomized Control Trials with only an endline measurement subject to a costs constraint. — maxpower.opt","text":"maxpower.opt returns matrix size (14 x number Scenarios). scenario combination specify parameters, fixed variable costs per unit. scenario matrix provides following components: scenario vector number scenario displayed. delta vector size effect outcome variable. sigma vector standard deviation outcome variable. rho vector intra-cluster correlation. C vector maximum level total costs implementing RCT. includes data collection costs (baseline endline) costs implementing intervention study. v0 vector variable cost per control unit. v1 vector variable costs per treatment unit. f0 vector fixed costs per control cluster. f1 vector fixed costs per treatment cluster. k0 vector optimum number control clusters maximize power. k1 vector optimum number treatment clusters maximize power. m0 vector optimum number sample units per control cluster maximize power. m1 vector optimum number sample units per treatment cluster maximize power. power vector power RCT optimum number clusters units provided function.","code":""},{"path":"/reference/maxpower.opt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Power maximizing sample design for cluster Randomized Control Trials with only an endline measurement subject to a costs constraint. — maxpower.opt","text":"McConnell Vera-Hernández (2022). Powerfull Cluster Randomized Control Trials. Mimeo","code":""},{"path":"/reference/maxpower.opt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Power maximizing sample design for cluster Randomized Control Trials with only an endline measurement subject to a costs constraint. — maxpower.opt","text":"Nancy . Daza-Báez, n.baez@ucl.ac.uk Brendon McConnell, B..Mcconnell@soton.ac.uk> Marcos Vera-Hernández, m.vera@ucl.ac.uk","code":""},{"path":"/reference/maxpower.opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power maximizing sample design for cluster Randomized Control Trials with only an endline measurement subject to a costs constraint. — maxpower.opt","text":"","code":"## In this example, both fixed costs per cluster and variable cost per unit within cluster are different between treatment and control. ## There are three different scenarios, each with a different total costs. The syntax (optimal.s = \"CLUST-IND\") allows both the optimal number of clusters and units per ## cluster to be different between the treatment and control arms. The results will be saved in the \"myresults.xlsx\" file.  maxpower.opt(delta = 0.25,              sigma = 1,              rho = 0.05,              alpha = 0.05,              C = c(815052.294, 974856.169, 1095876.675),              v0 = 150,              v1 = 2200,              f0 = 500,              f1 = 18000,              optimal.s = \"CLUST-IND\",              output = \"myresults\")  ## If you wish, you can specify initial conditions for the optimization algorithm: m0=20, m1=18, k0=15 and k1=18.  maxpower.opt(delta = 0.25,              sigma = 1,              rho = 0.05,              alpha = 0.05,              C = c(815065.655, 877717.857, 995811.458),              v0 = 150,              v1 = 2200,              f0 = c(500, 1500, 5000),              f1 = 18000,              optimal.s = \"CLUST-IND\",              initial.cond = c(20, 18, 15, 18)) #>                      1              2              3 #> scenario      1.000000      2.0000000      3.0000000 #> delta         0.250000      0.2500000      0.2500000 #> sigma         1.000000      1.0000000      1.0000000 #> rho           0.050000      0.0500000      0.0500000 #> C        815065.655000 877717.8570000 995811.4580000 #> v0          150.000000    150.0000000    150.0000000 #> v1         2200.000000   2200.0000000   2200.0000000 #> f0          500.000000   1500.0000000   5000.0000000 #> f1        18000.000000  18000.0000000  18000.0000000 #> k0           87.968898     52.6143724     30.4356543 #> k1           14.661482     15.1884612     16.0409986 #> m0            7.958223     13.7840489     25.1661136 #> m1           12.468141     12.4681412     12.4681407 #> power         0.674025      0.6677639      0.6536381  ## This is an example with three scenarios, each with a different value of the fixed cost per cluster in the treatment group (f1). ## The syntax (optimal.s = \"CONST-IND\") requests that the number of units per cluster is constrained to be the same in treatment as in control.  maxpower.opt(delta = 0.25,              sigma = 1,              rho = 0.27,              alpha = 0.05,              C = c(75862.836, 145230.184, 204196.756),              v0 = 25,              v1 = 100,              f0 = 381,              f1 = c(500, 1981, 3500),              optimal.s = \"CONST-IND\") #>                      1              2              3 #> scenario     1.0000000      2.0000000      3.0000000 #> delta        0.2500000      0.2500000      0.2500000 #> sigma        1.0000000      1.0000000      1.0000000 #> rho          0.2700000      0.2700000      0.2700000 #> C        75862.8360000 145230.1840000 204196.7560000 #> v0          25.0000000     25.0000000     25.0000000 #> v1         100.0000000    100.0000000    100.0000000 #> f0         381.0000000    381.0000000    381.0000000 #> f1         500.0000000   1981.0000000   3500.0000000 #> k0          64.1971019     81.6868247     92.6482906 #> k1          46.2134146     37.2016788     34.2375765 #> m0           4.5447816      7.0129476      8.5481776 #> m1           4.5447816      7.0129476      8.5481776 #> power        0.4971883      0.5342804      0.5467766  ## This is an example with three scenarios, each with a different value of the variable cost per unit in the treatment group (v1). ## The syntax (optimal.s = \"CONST-CLUST\") requests that the number of clusters is constrained to be the same in treatment as in control.  maxpower.opt(delta = 0.25,              sigma = 1,              rho = 0.05,              alpha = 0.05,              C = c(144412.242, 251543.646, 384610.811),              v0 = 150,              v1 = c(250, 750, 1500),              f0 = 500,              f1 = 18000,              optimal.s = \"CONST-CLUST\") #>                       1              2              3 #> scenario      1.0000000      2.0000000      3.0000000 #> delta         0.2500000      0.2500000      0.2500000 #> sigma         1.0000000      1.0000000      1.0000000 #> rho           0.0500000      0.0500000      0.0500000 #> C        144412.2420000 251543.6460000 384610.8110000 #> v0          150.0000000    150.0000000    150.0000000 #> v1          250.0000000    750.0000000   1500.0000000 #> f0          500.0000000    500.0000000    500.0000000 #> f1        18000.0000000  18000.0000000  18000.0000000 #> k0            4.7719101      7.1633417      9.6463857 #> k1            4.7719101      7.1633417      9.6463857 #> m0           34.2296240     34.2296138     34.2296186 #> m1           26.5141636     15.3079510     10.8243554 #> power         0.1888505      0.2731188      0.3375474"},{"path":"/reference/mincost.opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Cost minimizing sample designs for cluster Randomized Control Trials with only an endline measurement subject to a power constraint. — mincost.opt","title":"Cost minimizing sample designs for cluster Randomized Control Trials with only an endline measurement subject to a power constraint. — mincost.opt","text":"function delivers number clusters number units (individuals, firms, etc) within cluster minimizes total costs subject power constraint cluster Randomized Control Trial (RCT). function assumes outcome variable continuous measured endline. function assumes cost function includes fixed costs per cluster (can different treatment control clusters) well cost per unit within cluster (can different treatment control clusters): \\(Costs = k0*(f0 + (v0*m0)) + k1*(f1 + (v1*m1))\\). function provides optimal number clusters units within clusters three different cases: (1) optimal number clusters units allowed different treatment control arms, (2) number clusters allowed different treatment control arms, number units constrained arms, (3) number units within cluster allowed different treatment control arms, number clusters constrained arms.","code":""},{"path":"/reference/mincost.opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cost minimizing sample designs for cluster Randomized Control Trials with only an endline measurement subject to a power constraint. — mincost.opt","text":"","code":"mincost.opt(   delta,   sigma,   rho,   alpha,   beta,   q = 1,   v0,   v1,   f0,   f1,   optimal.s = c(\"CLUST-IND\", \"CONST-IND\", \"CONST-CLUST\"),   initial.cond = NULL,   seed = 210613,   lb = NULL,   ub = NULL,   temp = NULL,   output = NULL )"},{"path":"/reference/mincost.opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cost minimizing sample designs for cluster Randomized Control Trials with only an endline measurement subject to a power constraint. — mincost.opt","text":"delta Vector. Size effect outcome variable (effect size measured units outcome variable). sigma Vector. Standard deviation outcome variable. rho Vector. Intra-cluster correlation. alpha Vector. Significance level null hypothesis effect. beta Vector. Maximum level power implementing RCT. q (K - q) degrees freedom test null hypothesis null effect. Default 1. v0 Vector. Variable costs per unit control clusters. includes cost data collection (baseline endline) cost implementing intervention study. v1 Vector. Variable costs per unit treatment clusters. includes cost data collection (baseline endline) cost implementing intervention study. f0 Vector. Fixed costs per control cluster. includes total fixed cost: baseline endline. f1 Vector. Fixed costs per treatment cluster. includes total fixed cost: baseline endline. optimal.s Indicates whether sample design constrain number units per treatment control clusters (\"CONST-IND\") whether sample design constrain treatment control clusters \"CONST-CLUST\" whether solution fully unconstrained (\"CLUST-IND\"). initial.cond Vector. Initial values number sample units per cluster (m0,m1) number clusters (k0,k1) - keep order- optimization routine use. Default NULL, case, function compute initial conditions. seed Integer. Seed random number generator optimization routine GenSA use. Default 210613. lb Vector. Minimum possible value optimal number clusters optimal number units. Default 1 parameter. ub Vector. Maximum possible value optimal number clusters optimal number units. Default 1000 parameter. temp Numeric. Temperature parameter GenSA optimization function. Default NULL, case, default value GenSA function used. output Indicates name xlsx file want save results. Default NULL, case, results presented matrix.","code":""},{"path":"/reference/mincost.opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cost minimizing sample designs for cluster Randomized Control Trials with only an endline measurement subject to a power constraint. — mincost.opt","text":"Returns matrix size (13 x number Scenarios). scenario combination specify parameters, fixed variable costs per unit. scenario matrix provides following components: scenario vector number scenario displayed. delta vector size effect outcome variable. sigma vector standard deviation outcome variable. rho vector intra-cluster correlation. v0 vector variable cost per control unit. v1 vector variable costs per treatment unit. f0 vector fixed costs per control cluster. f1 vector fixed costs per treatment cluster. k0 vector optimum number control clusters minimize costs. k1 vector optimum number treatment clusters minimize costs. m0 vector optimum number sample units per control cluster minimize costs. m1 vector optimum number sample units per treatment cluster minimize costs. Cost vector minimum cost RCT optimum number clusters units provided function.","code":""},{"path":"/reference/mincost.opt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cost minimizing sample designs for cluster Randomized Control Trials with only an endline measurement subject to a power constraint. — mincost.opt","text":"McConnell Vera-Hernández (2022). Powerfull Cluster Randomized Control Trials. Mimeo","code":""},{"path":"/reference/mincost.opt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cost minimizing sample designs for cluster Randomized Control Trials with only an endline measurement subject to a power constraint. — mincost.opt","text":"Nancy . Daza-Báez, n.baez@ucl.ac.uk Brendon McConnell, B..Mcconnell@soton.ac.uk> Marcos Vera-Hernández, m.vera@ucl.ac.uk","code":""},{"path":"/reference/mincost.opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cost minimizing sample designs for cluster Randomized Control Trials with only an endline measurement subject to a power constraint. — mincost.opt","text":"","code":"## In this example, both fixed costs per cluster and variable cost per unit within cluster are different between treatment and control. ## There are three different scenarios, each with a different rho. The syntax (optimal.s = \"CLUST-IND\") allows both the optimal number of clusters and units per ## cluster to be different between the treatment and control arms. The results will be saved in the \"myresults.xlsx\" file.  mincost.opt(delta = 0.25,             sigma = 1,             rho = c(0.05, 0.10, 0.15),             alpha = 0.05,             beta = 0.80,             v0 = 150,             v1 = 2200,             f0 = 500,             f1 = 18000,             optimal.s = \"CLUST-IND\",             output = \"myresults\")  ## If you wish, you can specify initial conditions for the optimization algorithm: m0=20, m1=18, k0=15 and k1=18.  mincost.opt(delta = 0.25,             sigma = 1,             rho = 0.05,             alpha = 0.05,             beta = 0.80,             v0 = 150,             v1 = 2200,             f0 = c(500, 1500, 5000),             f1 = 18000,             optimal.s = \"CLUST-IND\",             initial.cond = c(20, 18, 15, 18)) #>                       1             2             3 #> scenario       1.000000       2.00000       3.00000 #> delta          0.250000       0.25000       0.25000 #> sigma          1.000000       1.00000       1.00000 #> rho            0.050000       0.05000       0.05000 #> v0           150.000000     150.00000     150.00000 #> v1          2200.000000    2200.00000    2200.00000 #> f0           500.000000    1500.00000    5000.00000 #> f1         18000.000000   18000.00000   18000.00000 #> k0           118.035743      71.35595      42.37807 #> k1            19.672624      20.59869      22.33520 #> m0             7.958224      13.78405      25.16611 #> m1            12.468141      12.46814      12.46814 #> cost     1093646.654018 1190366.55801 1386550.23526  ## This is an example with three scenarios, each with a different value of the fixed cost per cluster in the treatment group (f1). ## The syntax (optimal.s = \"CONST-IND\") requests that the number of units per cluster is constrained to be the same in treatment as in control.  mincost.opt(delta = 0.25,             sigma = 1,             rho = 0.27,             alpha = 0.05,             beta = 0.80,             v0 = 25,             v1 = 150,             f0 = 381,             f1 = c(500, 1981, 3500),             optimal.s = \"CONST-IND\") #>                      1             2             3 #> scenario      1.000000      2.000000      3.000000 #> delta         0.250000      0.250000      0.250000 #> sigma         1.000000      1.000000      1.000000 #> rho           0.270000      0.270000      0.270000 #> v0           25.000000     25.000000     25.000000 #> v1          150.000000    150.000000    150.000000 #> f0          381.000000    381.000000    381.000000 #> f1          500.000000   1981.000000   3500.000000 #> k0          144.657565    164.295732    179.255650 #> k1           95.924534     70.516569     62.841467 #> m0            3.934251      6.102834      7.485685 #> m1            3.934251      6.102834      7.485685 #> cost     173913.449533 291909.377808 392349.539144  ## This is an example with three scenarios, each with a different value of the variable cost per unit in the treatment group (v1). ## The syntax (optimal.s = \"CONST-CLUST\")  requests that the number of clusters is constrained to be the same in treatment as in control.  mincost.opt(delta = 0.25,             sigma = 1,             rho = 0.05,             alpha = 0.05,             beta = 0.80,             v0 = 150,             v1 = c(250, 750, 1500),             f0 = 500,             f1 = 18000,             optimal.s = \"CONST-CLUST\") #>                     1            2             3 #> scenario      1.00000      2.00000       3.00000 #> delta         0.25000      0.25000       0.25000 #> sigma         1.00000      1.00000       1.00000 #> rho           0.05000      0.05000       0.05000 #> v0          150.00000    150.00000     150.00000 #> v1          250.00000    750.00000    1500.00000 #> f0          500.00000    500.00000     500.00000 #> f1        18000.00000  18000.00000   18000.00000 #> k0           21.53244     24.82447      28.05123 #> k1           21.53244     24.82447      28.05123 #> m0           34.22962     34.22962      34.22962 #> m1           26.51415     15.30795      10.82436 #> cost     651635.80233 871721.31688 1118429.91590"}]
